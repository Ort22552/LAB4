
LabADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cb  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001da  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9e:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	initTimer1();
	sei ();
}

void initADC(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1);
  ac:	80 81       	ld	r24, Z
  ae:	86 66       	ori	r24, 0x66	; 102
  b0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  be:	80 81       	ld	r24, Z
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	80 83       	st	Z, r24
	//HABILITAR
	ADCSRA |= (1<<ADEN);
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <initTimer1>:
}

void initTimer1(void){
	TCCR1B |= (1<<CS12)| (1<<CS10); 
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
	TCNT1 = 62411; 	
  d6:	8b ec       	ldi	r24, 0xCB	; 203
  d8:	93 ef       	ldi	r25, 0xF3	; 243
  da:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  de:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1<<TOIE1);
  e2:	ef e6       	ldi	r30, 0x6F	; 111
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <setup>:
		PORTB &= ~(1<<PORTB2); 
    }
}

void setup(void){
	cli ();
  ee:	f8 94       	cli
	// ENTRADAS Y SALIDAS
	DDRB = 0x0F;
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~((1 << DDC0 )|(1 << DDC1 ));
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8c 7f       	andi	r24, 0xFC	; 252
  fc:	87 b9       	out	0x07, r24	; 7
	// Pull-up
	PORTC |= (1 << PORTC0)|(1 << PORTC1) ;	
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	83 60       	ori	r24, 0x03	; 3
 102:	88 b9       	out	0x08, r24	; 8
	// INICIAR APAGADO
	PORTD = 0;
 104:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0; 
 106:	15 b8       	out	0x05, r1	; 5
	//HBILITAR RX Y TX 
	UCSR0B = 0; 
 108:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// INTERRUPCIONES 
	PCMSK1 |= (1 << PCINT9)|(1 << PCINT8);
 10c:	ec e6       	ldi	r30, 0x6C	; 108
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
 116:	e8 e6       	ldi	r30, 0x68	; 104
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24
	initADC();
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initTimer1();
 124:	0e 94 66 00 	call	0xcc	; 0xcc <initTimer1>
	sei ();
 128:	78 94       	sei
 12a:	08 95       	ret

0000012c <main>:
uint8_t contador = 0; 
const uint8_t tabla[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71}; 

int main(void)
{
    setup(); 
 12c:	0e 94 77 00 	call	0xee	; 0xee <setup>
    while (1) 
    {
		PORTB |= (1<<PORTB0); 
 130:	85 b1       	in	r24, 0x05	; 5
 132:	81 60       	ori	r24, 0x01	; 1
 134:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[(valor & 0x0F)]; 
 136:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <valor>
 13a:	ef 70       	andi	r30, 0x0F	; 15
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	80 81       	ld	r24, Z
 144:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x24>
 150:	00 00       	nop
		_delay_us(5);
		PORTB &= ~(1<<PORTB0); 
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB1); 
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[valor>>4];
 15e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <valor>
 162:	e2 95       	swap	r30
 164:	ef 70       	andi	r30, 0x0F	; 15
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e0 50       	subi	r30, 0x00	; 0
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	8f e1       	ldi	r24, 0x1F	; 31
 172:	9e e4       	ldi	r25, 0x4E	; 78
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x48>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x4e>
 17a:	00 00       	nop
		_delay_us(5);
		PORTB &= ~(1<<PORTB1);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PORTB2); 
 182:	85 b1       	in	r24, 0x05	; 5
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;
 188:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x66>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x6c>
 198:	00 00       	nop
		_delay_us(5);
		PORTB &= ~(1<<PORTB2); 
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8b 7f       	andi	r24, 0xFB	; 251
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	c7 cf       	rjmp	.-114    	; 0x130 <main+0x4>

000001a2 <__vector_4>:
	TCCR1B |= (1<<CS12)| (1<<CS10); 
	TCNT1 = 62411; 	
	TIMSK1 |= (1<<TOIE1);
}

ISR (PCINT1_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
	
	if (PINC==(1<<PINC0))
 1ae:	86 b1       	in	r24, 0x06	; 6
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	31 f4       	brne	.+12     	; 0x1c0 <__vector_4+0x1e>
	{
		contador++;
 1b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <__vector_4+0x2e>
	}
	else if (PINC== (1<<PINC1))
 1c0:	86 b1       	in	r24, 0x06	; 6
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <__vector_4+0x2e>
	{
		contador--;
 1c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}	
	else {
		contador=contador;
	}
	
	PCIFR |= (1<< PCIF1);
 1d0:	8b b3       	in	r24, 0x1b	; 27
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	8b bb       	out	0x1b, r24	; 27
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_21>:

ISR (ADC_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	valor= ADCH;
 1f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1f8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <valor>
	if (contador<=valor)
 1fc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 200:	89 17       	cp	r24, r25
 202:	20 f0       	brcs	.+8      	; 0x20c <__vector_21+0x2a>
	{
		PORTB |= (1<<PORTB3);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	88 60       	ori	r24, 0x08	; 8
 208:	85 b9       	out	0x05, r24	; 5
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_21+0x30>
	} 
	else
	{
		PORTB &= ~(1<<PORTB3);
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	85 b9       	out	0x05, r24	; 5
	}
	ADCSRA |= (1<<ADIF);	
 212:	ea e7       	ldi	r30, 0x7A	; 122
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 61       	ori	r24, 0x10	; 16
 21a:	80 83       	st	Z, r24
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_13>:

ISR (TIMER1_OVF_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 64       	ori	r24, 0x40	; 64
 248:	80 83       	st	Z, r24
	TCNT1 = 62411;
 24a:	8b ec       	ldi	r24, 0xCB	; 203
 24c:	93 ef       	ldi	r25, 0xF3	; 243
 24e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 252:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= (1<<TOV1);
 256:	86 b3       	in	r24, 0x16	; 22
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	86 bb       	out	0x16, r24	; 22
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
